---
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

import ConfigCarrier from "@components/ConfigCarrier.astro";
import { profileConfig, siteConfig } from "@/config";
import {
	AUTO_MODE,
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	BANNER_HEIGHT_HOME,
	DARK_MODE,
	DEFAULT_THEME,
	LIGHT_MODE,
	PAGE_WIDTH,
} from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import type { Favicon } from "../types/config";
import { pathsEqual, url } from "../utils/url-utils";
import "katex/dist/katex.css";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
}

let { title, banner, description, lang, setOGTypeArticle } = Astro.props;

const isHomePage = pathsEqual(Astro.url.pathname, url("/"));

const configHue = siteConfig.themeColor.hue;
if (!banner || typeof banner !== "string" || banner.trim() === "") {
	banner = siteConfig.banner.src;
}

banner = siteConfig.banner.src;

const enableBanner = siteConfig.banner.enable;

let pageTitle: string;
if (title) {
	pageTitle = `${title} - ${siteConfig.title}`;
} else {
	pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] =
	siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

if (!lang) {
	lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");

const bannerOffsetByPosition = {
	top: `${BANNER_HEIGHT_EXTEND}vh`,
	center: `${BANNER_HEIGHT_EXTEND / 2}vh`,
	bottom: "0",
};
const bannerOffset =
	bannerOffsetByPosition[siteConfig.banner.position || "center"];
---

<!DOCTYPE html>
<html lang={siteLang} class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
	  data-overlayscrollbars-initialize
>
	<head>
		<!-- ✅ [优化] 使用 partytown 将 Umami 脚本移出主线程，防止网络延迟阻塞页面切换 -->
		<script type="text/partytown" src="https://umami.14131413.xyz/script.js" data-website-id="79b06c28-877c-4eeb-8c6e-8a5ce1119ed2"></script>
		<script type="text/partytown" src="https://cloud.umami.is/script.js" data-website-id="a1a1f897-326f-4e68-a6f0-54e9dc361522"></script>

		<title>{pageTitle}</title>

		<meta charset="UTF-8" />
		<meta name="description" content={description || pageTitle}>
		<meta name="author" content={profileConfig.name}>

		<meta property="og:site_name" content={siteConfig.title}>
		<meta property="og:url" content={Astro.url}>
		<meta property="og:title" content={pageTitle}>
		<meta property="og:description" content={description || pageTitle}>
		{setOGTypeArticle ? (
        <meta property="og:type" content="article" />
        ) : (
        <meta property="og:type" content="website" />
        )}

		<meta name="twitter:card" content="summary_large_image">
		<meta property="twitter:url" content={Astro.url}>
		<meta name="twitter:title" content={pageTitle}>
		<meta name="twitter:description" content={description || pageTitle}>

		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{favicons.map(favicon => (
			<link rel="icon"
				  href={favicon.src.startsWith('/') ? url(favicon.src) : favicon.src}
				  sizes={favicon.sizes}
				  media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
			/>
		))}

		<!-- Set the theme before the page is rendered to avoid a flash -->
		<script is:inline define:vars={{DEFAULT_THEME, LIGHT_MODE, DARK_MODE, AUTO_MODE, BANNER_HEIGHT_EXTEND, PAGE_WIDTH, configHue}}>
			// Load the theme from local storage
			const theme = localStorage.getItem('theme') || DEFAULT_THEME;
			switch (theme) {
				case LIGHT_MODE:
					document.documentElement.classList.remove('dark');
					break
				case DARK_MODE:
					document.documentElement.classList.add('dark');
					break
				case AUTO_MODE:
					if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
						document.documentElement.classList.add('dark');
					} else {
						document.documentElement.classList.remove('dark');
					}
			}

			// Load the hue from local storage
			const hue = localStorage.getItem('hue') || configHue;
			document.documentElement.style.setProperty('--hue', hue);

			// calculate the --banner-height-extend, which needs to be a multiple of 4 to avoid blurry text
			let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
			offset = offset - offset % 4;
			document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
		</script>
		<style define:vars={{
			configHue,
			'page-width': `${PAGE_WIDTH}rem`,
		}}></style>

		<slot name="head"></slot>

		<link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`}/>

	</head>
	<body class=" min-h-screen transition " class:list={[{"lg:is-home": isHomePage, "enable-banner": enableBanner}]}
		  data-overlayscrollbars-initialize
	>
		<ConfigCarrier></ConfigCarrier>
		<slot />

		<div id="page-height-extend" class="hidden h-[300vh]"></div>
	</body>
</html>

<style is:global define:vars={{
	bannerOffset,
	'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
	'banner-height': `${BANNER_HEIGHT}vh`,
}}>
@tailwind components;
@layer components {
	/* --- 这是你原来的 Tailwind 组件层样式，保持不变 --- */
	.enable-banner.is-home #banner-wrapper {
		@apply h-[var(--banner-height-home)] translate-y-[var(--banner-height-extend)]
	}
	.enable-banner #banner-wrapper {
		@apply h-[var(--banner-height-home)]
	}

	.enable-banner.is-home #banner {
		@apply h-[var(--banner-height-home)] translate-y-0
	}
	.enable-banner #banner {
		@apply h-[var(--banner-height-home)] translate-y-[var(--bannerOffset)]
	}
	.enable-banner.is-home #main-grid {
		@apply translate-y-[var(--banner-height-extend)];
	}
	.enable-banner #top-row {
		@apply h-[calc(var(--banner-height-home)_-_4.5rem)] transition-all duration-300
	}
	.enable-banner.is-home #sidebar-sticky {
		@apply top-[calc(1rem_-_var(--banner-height-extend))]
	}
	.navbar-hidden {
		@apply opacity-0 -translate-y-16
	}
}

/* --- 从这里开始，是新添加的滚动条修复代码 --- */

/* 解决 Expressive Code 代码块滚动条与圆角冲突的问题 */
  
/* 1. 为代码块容器增加底部内边距，给滚动条留出空间 */
.expressive-code {
  padding-bottom: 0.75rem !important;
}

/* 2. 自定义滚动条样式，使其更美观、更纤细 */
.expressive-code::-webkit-scrollbar {
  height: 8px; /* 水平滚动条的高度 */
  background-color: transparent; /* 滚动条轨道背景透明 */
}

/* 3. 定义滚动条滑块的样式 */
.expressive-code::-webkit-scrollbar-thumb {
  background-color: rgba(128, 128, 128, 0.3); /* 滑块颜色，使用半透明灰色 */
  border-radius: 4px; /* 为滑块本身也添加圆角 */
  border: 2px solid transparent; /* 创建一个“边框”，使滑块看起来更窄 */
  background-clip: content-box;
}

.expressive-code::-webkit-scrollbar-thumb:hover {
  background-color: rgba(128, 128, 128, 0.5); /* 鼠标悬停时颜色加深 */
}

/* 针对暗黑模式的优化（可选） */
:root.dark .expressive-code::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.2);
}

:root.dark .expressive-code::-webkit-scrollbar-thumb:hover {
  background-color: rgba(255, 255, 255, 0.4);
}

</style>

<!-- ✅ [优化] 将所有客户端脚本合并到一个地方，并进行优化 -->
<script>
import 'overlayscrollbars/overlayscrollbars.css';
import { OverlayScrollbars } from 'overlayscrollbars';
import PhotoSwipeLightbox from "photoswipe/lightbox";
import "photoswipe/style.css";
import { getHue, getStoredTheme, setHue, setTheme } from "../utils/setting-utils";
import { pathsEqual, url } from "../utils/url-utils";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_HOME,
	BANNER_HEIGHT_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT
} from "../constants/constants";
import { siteConfig } from '../config';

const bannerEnabled = !!document.getElementById('banner-wrapper');
let lightbox; // PhotoSwipe instance

function setClickOutsideToClose(panel, ignores) {
	document.addEventListener("click", event => {
		let panelDom = document.getElementById(panel);
		let tDom = event.target;
		if (!(tDom instanceof Node)) return;
		for (let ig of ignores) {
			let ie = document.getElementById(ig)
			if (ie == tDom || (ie?.contains(tDom))) {
				return;
			}
		}
		panelDom?.classList.add("float-panel-closed");
	});
}

function loadTheme() {
	const theme = getStoredTheme();
	setTheme(theme);
}

function loadHue() {
	setHue(getHue());
}

/**
 * ✅ [优化] 按需初始化 KaTeX 公式的自定义滚动条
 * 只有当页面上存在 .katex-display 元素时，才会执行相关逻辑。
 */
function initCustomScrollbar() {
	const bodyElement = document.querySelector('body');
	if (bodyElement && !bodyElement.hasAttribute('data-overlayscrollbars-initialize')) {
		OverlayScrollbars(
			{ target: bodyElement, cancel: { nativeScrollbarsOverlaid: true } },
			{ scrollbars: { theme: 'scrollbar-base scrollbar-auto py-1', autoHide: 'move', autoHideDelay: 500 } }
		);
	}

	const katexElements = document.querySelectorAll('.katex-display');
	if (katexElements.length === 0) {
		return; // 如果页面没有 KaTeX 公式，直接返回，避免不必要的性能开销
	}

	const katexObserverOptions = { root: null, rootMargin: '100px', threshold: 0.1 };
	const processKatexElement = (element) => {
		if (!element.parentNode || element.hasAttribute('data-scrollbar-initialized')) return;
		const container = document.createElement('div');
		container.className = 'katex-display-container';
		container.setAttribute('aria-label', 'scrollable container for formulas');
		element.parentNode.insertBefore(container, element);
		container.appendChild(element);
		OverlayScrollbars(container, {
			scrollbars: { theme: 'scrollbar-base scrollbar-auto', autoHide: 'leave', autoHideDelay: 500 }
		});
		element.setAttribute('data-scrollbar-initialized', 'true');
	};

	const katexObserver = new IntersectionObserver((entries, observer) => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				processKatexElement(entry.target);
				observer.unobserve(entry.target);
			}
		});
	}, katexObserverOptions);

	katexElements.forEach(element => katexObserver.observe(element));
}

/**
 * ✅ [优化] 按需初始化 PhotoSwipe 图片灯箱
 * 只有当页面上存在符合条件的图片时，才创建实例。
 */
function createPhotoSwipe() {
    const gallerySelector = ".custom-md img, #post-cover img";
	if (!document.querySelector(gallerySelector)) {
		return; // 如果页面上没有图片，则不初始化灯箱，节省性能
	}

	lightbox = new PhotoSwipeLightbox({
		gallery: gallerySelector,
		pswpModule: () => import("photoswipe"),
		closeSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
		zoomSVG: '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
		padding: { top: 20, bottom: 20, left: 20, right: 20 },
		wheelToZoom: true,
		arrowPrev: false,
		arrowNext: false,
		imageClickAction: 'close',
		tapAction: 'close',
		doubleTapAction: 'zoom',
	});

	lightbox.addFilter("domItemData", (itemData, element) => {
		if (element instanceof HTMLImageElement) {
			itemData.src = element.src;
			itemData.w = Number(element.naturalWidth || window.innerWidth);
			itemData.h = Number(element.naturalHeight || window.innerHeight);
			itemData.msrc = element.src;
		}
		return itemData;
	});

	lightbox.init();
}

function showBanner() {
	if (!siteConfig.banner.enable) return;
	const banner = document.getElementById('banner');
	if (!banner) return;
	banner.classList.remove('opacity-0', 'scale-105');
}

// 页面滚动时的处理函数
function scrollFunction() {
	const backToTopBtn = document.getElementById('back-to-top-btn');
	const toc = document.getElementById('toc-wrapper');
	const navbar = document.getElementById('navbar-wrapper');
	const bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100);

	if (backToTopBtn) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			backToTopBtn.classList.remove('hide');
		} else {
			backToTopBtn.classList.add('hide');
		}
	}

	if (bannerEnabled && toc) {
		if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
			toc.classList.remove('toc-hide');
		} else {
			toc.classList.add('toc-hide');
		}
	}

	if (bannerEnabled && navbar) {
		const NAVBAR_HEIGHT = 72;
		const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16;
		let currentBannerHeight = BANNER_HEIGHT;
		if (document.body.classList.contains('lg:is-home') && window.innerWidth >= 1024) {
			currentBannerHeight = BANNER_HEIGHT_HOME;
		}
		const threshold = window.innerHeight * (currentBannerHeight / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16;
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden');
		} else {
			navbar.classList.remove('navbar-hidden');
		}
	}
}

// 浏览器窗口大小变化时的处理函数
function resizeFunction() {
	let offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100));
	offset = offset - offset % 4;
	document.documentElement.style.setProperty('--banner-height-extend', `${offset}px`);
}

/**
 * 核心初始化函数
 * 在首次加载和每次 swup 页面切换后运行
 */
function initPageContent() {
	initCustomScrollbar();
	createPhotoSwipe();
}

/**
 * 设置 swup 钩子，用于处理客户端路由
 */
function setupSwupHooks() {
	if (!window.swup) return;

	window.swup.hooks.on('link:click', () => {
		document.documentElement.style.setProperty('--content-delay', '0ms');
		if (!bannerEnabled) return;
		let threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16;
		let navbar = document.getElementById('navbar-wrapper');
		if (!navbar || !document.body.classList.contains('lg:is-home')) return;
		if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
			navbar.classList.add('navbar-hidden');
		}
	});
    
	window.swup.hooks.on('content:replace', () => {
        // 在替换内容前，销毁旧的灯箱实例
		lightbox?.destroy?.();
        lightbox = null;
	}, { before: true });

	window.swup.hooks.on('page:view', () => {
        // 页面切换动画完成后，为新内容初始化脚本
        initPageContent();
        
        // 恢复页面高度
		const heightExtend = document.getElementById('page-height-extend');
		if (heightExtend) heightExtend.classList.remove('hidden');

        const toc = document.getElementById('toc-wrapper');
        if (toc) toc.classList.remove('toc-not-ready');
	});

	window.swup.hooks.on('visit:start', (visit) => {
		const bodyElement = document.querySelector('body');
		if (pathsEqual(visit.to.url, url('/'))) {
			bodyElement?.classList.add('lg:is-home');
		} else {
			bodyElement?.classList.remove('lg:is-home');
		}
		const heightExtend = document.getElementById('page-height-extend');
		if (heightExtend) heightExtend.classList.remove('hidden');
		const toc = document.getElementById('toc-wrapper');
		if (toc) toc.classList.add('toc-not-ready');
	});

	window.swup.hooks.on('visit:end', () => {
		setTimeout(() => {
			const heightExtend = document.getElementById('page-height-extend');
			if (heightExtend) heightExtend.classList.add('hidden');
		}, 200);
	});
}

/**
 * 网站总入口函数
 * 设置所有一次性的事件监听器和钩子
 */
function initializeSite() {
	// 加载主题和颜色配置
	loadTheme();
	loadHue();

	// 设置一次性的点击监听
	setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"]);
	setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"]);
	setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"]);
	
    // 显示 Banner
    showBanner();

	// 绑定全局滚动和窗口大小变化事件
	window.onscroll = scrollFunction;
	window.onresize = resizeFunction;

	// 设置 Swup 导航钩子
	setupSwupHooks();

	// 首次加载页面时，执行内容初始化
	initPageContent();
}

// 启动逻辑：等待 swup 可用后，初始化所有功能
if (window.swup) {
	initializeSite();
} else {
	document.addEventListener('swup:enable', initializeSite);
}
</script>