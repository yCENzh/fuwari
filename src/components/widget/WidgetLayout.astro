---
import { Icon } from "astro-icon/components";
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";

interface Props {
  id: string;
  name?: string;
  isCollapsed?: boolean;
  collapsedHeight?: string;
  class?: string;
  style?: string;
}
const { id, name, isCollapsed, collapsedHeight, style } = Astro.props;
const className = Astro.props.class;
---

<widget-layout 
  data-id={id} 
  data-is-collapsed={String(isCollapsed)} 
  class={"pb-4 card-base relative " + className} 
  style={style}
>
  <div class="font-bold transition text-lg text-neutral-900 dark:text-neutral-100 relative ml-8 mt-4 mb-2
        before:content-[''] before:w-1 before:h-4 before:rounded-md before:bg-[var(--primary)]
        before:absolute before:left-[-16px] before:top-[5.5px] before:transition-all before:duration-300">
    {name}
  </div>
  
  <div 
    id={id} 
    class:list={["collapse-wrapper px-4 overflow-hidden transition-all duration-500 ease-[cubic-bezier(0.22,0.61,0.36,1)]", 
                {"collapsed": isCollapsed}]}
  >
    <slot></slot>
  </div>
  
  {isCollapsed && (
    <div class="expand-btn px-4 -mb-2 absolute bottom-0 left-0 right-0 bg-gradient-to-t from-[var(--card-bg)] to-transparent pt-6 pb-2">
      <button 
        class="btn-plain rounded-lg w-full h-9 hover:bg-[var(--btn-plain-bg-hover)] active:bg-[var(--btn-plain-bg-active)] transition-colors duration-300"
        aria-label={i18n(I18nKey.expandCategories)}
      >
        <div class="text-[var(--primary)] flex items-center justify-center gap-2 group">
          <Icon 
            name="material-symbols:more-horiz" 
            class="text-[1.75rem] group-hover:scale-110 transition-transform duration-300"
          />
          <span class="group-hover:translate-x-1 transition-transform duration-300">
            {i18n(I18nKey.more)}
          </span>
        </div>
      </button>
    </div>
  )}
</widget-layout>

<style define:vars={{ collapsedHeight }}>
  .collapsed {
    max-height: var(--collapsedHeight);
    mask-image: linear-gradient(to bottom, black 70%, transparent 100%);
    -webkit-mask-image: linear-gradient(to bottom, black 70%, transparent 100%);
  }
  
  .collapse-wrapper {
    transition: max-height 0.5s cubic-bezier(0.22, 0.61, 0.36, 1),
                opacity 0.3s ease;
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super();
      
      if (this.dataset.isCollapsed !== "true") return;
      
      const id = this.dataset.id;
      const btn = this.querySelector('.expand-btn');
      const wrapper = this.querySelector(`#${id}`);
      
      if (!btn || !wrapper) return;
      
      btn.addEventListener('click', () => {
        // 添加展开动画
        wrapper.classList.add('expanding');
        wrapper.classList.remove('collapsed');
        
        // 监听动画结束
        const onTransitionEnd = () => {
          wrapper.classList.remove('expanding');
          btn.classList.add('hidden');
          wrapper.removeEventListener('transitionend', onTransitionEnd);
        };
        
        wrapper.addEventListener('transitionend', onTransitionEnd);
      });
    }
  }
  
  if (!customElements.get("widget-layout")) {
    customElements.define("widget-layout", WidgetLayout);
  }
</script>
