---
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";
import clsx from "clsx";

interface Props {
  class?: string;
  published: Date;
  updated?: Date;
  tags: string[];
  category: string | null;
  hideTagsForMobile?: boolean;
  hideUpdateDate?: boolean;
}

const {
  published,
  updated,
  tags = [],
  category,
  hideTagsForMobile = false,
  hideUpdateDate = false,
  class: className,
} = Astro.props;

const showUpdated = !hideUpdateDate && updated && updated.getTime() !== published.getTime();
const linkClass = "link-lg transition text-50 text-sm font-medium hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap";
const metaItemClass = "flex items-center";
const tagContainerClass = clsx("items-center", {
  "flex": !hideTagsForMobile,
  "hidden md:flex": hideTagsForMobile
});
---

<div class={clsx("flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className)}>
  <!-- 发布日期 -->
  <div class={metaItemClass}>
    <div class="meta-icon">
      <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl" />
    </div>
    <span class="text-50 text-sm font-medium">
      {formatDateToYYYYMMDD(published)}
    </span>
  </div>

  <!-- 更新日期 -->
  {showUpdated && (
    <div class={metaItemClass}>
      <div class="meta-icon">
        <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl" />
      </div>
      <span class="text-50 text-sm font-medium">
        {formatDateToYYYYMMDD(updated!)}
      </span>
    </div>
  )}

  <!-- 分类 -->
  <div class={metaItemClass}>
    <div class="meta-icon">
      <Icon name="material-symbols:book-2-outline-rounded" class="text-xl" />
    </div>
    <a
      href={getCategoryUrl(category)}
      aria-label={`View all posts in ${category || i18n(I18nKey.uncategorized)} category`}
      class={linkClass}
    >
      {category || i18n(I18nKey.uncategorized)}
    </a>
  </div>

  <!-- 标签 -->
  <div class={tagContainerClass}>
    <div class="meta-icon">
      <Icon name="material-symbols:tag-rounded" class="text-xl" />
    </div>
    <div class="flex flex-row flex-nowrap items-center">
      {tags.length > 0 ? (
        tags.map(tag => (
          <a
            href={getTagUrl(tag)}
            aria-label={`View all posts with ${tag.trim()} tag`}
            class={linkClass}
          >
            {tag.trim()}
          </a>
        )).reduce((acc: any[], element, index) => {
          if (index > 0) {
            acc.push(<span class="mx-1.5 text-[var(--meta-divider)] text-sm">/</span>);
          }
          acc.push(element);
          return acc;
        }, [])
      ) : (
        <div class="transition text-50 text-sm font-medium">
          {i18n(I18nKey.noTags)}
        </div>
      )}
    </div>
  </div>
</div>
