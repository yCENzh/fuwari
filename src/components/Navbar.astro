---
import { Icon } from "astro-icon/components";
import { navBarConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import NavMenuPanel from "./widget/NavMenuPanel.astro";

// 解构 props 获取 className
const { class: className } = Astro.props;

// 预处理导航链接 - 将预设枚举转换为实际链接对象
const links = navBarConfig.links.map(
  (item: NavBarLink | LinkPreset): NavBarLink => {
    if (typeof item === "number") {
      return LinkPresets[item];
    }
    return item;
  }
);
---
<div id="navbar" class="z-50 onload-animation">
  <!-- 顶部装饰元素 -->
  <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div>
  
  <!-- 导航栏主体 -->
  <div class:list={[
    className,
    "card-base !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4"
  ]}>
    <!-- 网站标题/Logo -->
    <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
      <div class="flex flex-row text-[var(--primary)] items-center text-md">
        <Icon name="material-symbols:home-outline-rounded" class="text-[1.75rem] mb-1 mr-2" />
        {siteConfig.title}
      </div>
    </a>
    
    <!-- 桌面导航链接 -->
    <div class="hidden md:flex">
      {links.map((l) => (
        <a 
          aria-label={l.name} 
          href={l.external ? l.url : url(l.url)} 
          target={l.external ? "_blank" : null}
          rel={l.external ? "noopener noreferrer" : null}
          class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
        >
          <div class="flex items-center">
            {l.name}
            {l.external && (
              <Icon 
                name="fa6-solid:arrow-up-right-from-square" 
                class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"
              />
            )}
          </div>
        </a>
      ))}
    </div>
    
    <!-- 导航栏工具 -->
    <div class="flex">
      <Search client:only="svelte" />
      
      {!siteConfig.themeColor.fixed && (
        <button 
          aria-label="Display Settings" 
          class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" 
          id="display-settings-switch"
        >
          <Icon name="material-symbols:palette-outline" class="text-[1.25rem]" />
        </button>
      )}
      
      <LightDarkSwitch client:only="svelte" />
      
      <button 
        aria-label="Menu" 
        name="Nav Menu" 
        class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" 
        id="nav-menu-switch"
      >
        <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]" />
      </button>
    </div>
    
    <!-- 菜单面板和显示设置 -->
    <NavMenuPanel links={links} />
    <DisplaySettings client:only="svelte" />
  </div>
</div>

<!-- 优化后的脚本部分 -->
<script>
(function() {
  // 缓存DOM元素引用
  let themeSwitchBtn, settingBtn, menuBtn;
  
  // 切换主题函数
  function switchTheme() {
    const isDark = localStorage.theme === 'dark';
    document.documentElement.classList.toggle('dark', !isDark);
    localStorage.theme = isDark ? 'light' : 'dark';
  }
  
  // 初始化按钮事件
  function initButtonEvents() {
    themeSwitchBtn = document.getElementById("scheme-switch");
    settingBtn = document.getElementById("display-settings-switch");
    menuBtn = document.getElementById("nav-menu-switch");
    
    if (themeSwitchBtn) {
      themeSwitchBtn.addEventListener("click", switchTheme);
    }
    
    if (settingBtn) {
      settingBtn.addEventListener("click", function() {
        const settingPanel = document.getElementById("display-setting");
        if (settingPanel) {
          settingPanel.classList.toggle("float-panel-closed");
        }
      });
    }
    
    if (menuBtn) {
      menuBtn.addEventListener("click", function() {
        const menuPanel = document.getElementById("nav-menu-panel");
        if (menuPanel) {
          menuPanel.classList.toggle("float-panel-closed");
        }
      });
    }
  }
  
  // 页面加载时初始化
  if (document.readyState !== "loading") {
    initButtonEvents();
  } else {
    document.addEventListener("DOMContentLoaded", initButtonEvents);
  }
})();
</script>

<!-- 优化后的Pagefind加载脚本 -->
{import.meta.env.PROD && (
  <script is:inline define:vars={{ scriptUrl: url('/pagefind/pagefind.js') }}>
    (function() {
      // 使用异步函数加载Pagefind
      async function loadPagefind() {
        try {
          // 检查脚本是否存在
          const response = await fetch(scriptUrl, { method: 'HEAD' });
          if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
          }
          
          // 动态导入Pagefind
          const pagefind = await import(scriptUrl);
          
          // 配置选项
          await pagefind.options({
            excerptLength: 20
          });
          
          // 保存到全局变量并触发事件
          window.pagefind = pagefind;
          document.dispatchEvent(new CustomEvent('pagefindready'));
          
        } catch (error) {
          console.error('Failed to load Pagefind:', error);
          
          // 提供降级方案
          window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
          };
          
          document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        }
      }
      
      // 延迟加载Pagefind
      function schedulePagefindLoad() {
        // 使用requestIdleCallback或setTimeout
        if ('requestIdleCallback' in window) {
          window.requestIdleCallback(loadPagefind, { timeout: 2000 });
        } else {
          setTimeout(loadPagefind, 1000);
        }
      }
      
      // 在文档加载完成后开始加载Pagefind
      if (document.readyState === 'complete') {
        schedulePagefindLoad();
      } else {
        window.addEventListener('load', schedulePagefindLoad);
      }
    })();
  </script>
)}
