/**
 * 文章密码保护组件
 * 使用构建时加密的内容和密码哈希验证
 */
interface Props {
  slug: string;
  encryptedData?: {
    content: string;
    hash: string;
  };
  class?: string;
}

const { slug, encryptedData, class: className = '' } = Astro.props;
const formId = `password-form-${slug}`;
const contentId = `article-content-${slug}`;
const overlayId = `overlay-${slug}`;
---

<div id={overlayId} class={`password-protection-overlay ${className}`}>
  <div class="password-container card-base rounded-xl p-6 md:p-8 max-w-md w-full">
    <h3 class="font-bold text-xl mb-4 text-black/90 dark:text-white/90">🔒 此文章已加密</h3>
    <p class="mb-6 text-black/70 dark:text-white/70">本文章内容可能忤逆部分读者所持的思潮立场、年龄背景或兴趣偏好。请输入密码以查看完整内容，若您不清楚密码，请联系博主获取。</p>
    <form id={formId} class="flex flex-col">
      <input 
        type="password" 
        class="form-input mb-4 p-2 rounded-md border border-gray-300 dark:border-gray-700 bg-white/90 dark:bg-[#1a1a1a] text-black/90 dark:text-white/90 w-full focus:outline-none focus:ring-2 focus:ring-[var(--primary)]" 
        placeholder="请输入密码" 
        required
      />
      <button 
        type="submit" 
        class="bg-[var(--primary)] hover:bg-[var(--primary-dark)] rounded-md py-2 px-4 text-white font-medium transition-colors"
      >
        解锁内容
      </button>
      <p id="error-message" class="text-red-500 mt-2 text-sm hidden">密码错误，请重试</p>
    </form>
  </div>
</div>

<style>
.password-protection-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--card-bg);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 20;
  backdrop-filter: blur(5px);
}

.password-container {
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.hidden-overlay {
  animation: fadeOut 0.3s forwards;
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; visibility: hidden; }
}

/* 确保加密内容在页面源码中不可见 */
.encrypted-content {
  display: none !important;
}

.encrypted-content.unlocked {
  display: block !important;
}
</style>

<script define:vars={{ slug, encryptedData, formId, contentId, overlayId }} is:inline>
(function() {
  // 动态加载所需的库
  function loadLibraries() {
    return new Promise((resolve, reject) => {
      let loadedCount = 0;
      const totalLibs = 2;
      
      function checkComplete() {
        loadedCount++;
        if (loadedCount === totalLibs) {
          resolve();
        }
      }
      
      // 加载 crypto-js
      if (typeof CryptoJS === 'undefined') {
        const cryptoScript = document.createElement('script');
        cryptoScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.2.0/crypto-js.min.js';
        cryptoScript.onload = checkComplete;
        cryptoScript.onerror = () => reject(new Error('Failed to load crypto-js'));
        document.head.appendChild(cryptoScript);
      } else {
        checkComplete();
      }
      
      // 加载 bcryptjs
      if (typeof dcodeIO === 'undefined') {
        const bcryptScript = document.createElement('script');
        bcryptScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/bcryptjs/2.4.3/bcrypt.min.js';
        bcryptScript.onload = checkComplete;
        bcryptScript.onerror = () => reject(new Error('Failed to load bcryptjs'));
        document.head.appendChild(bcryptScript);
      } else {
        checkComplete();
      }
    });
  }
  
  function initEncryption() {
    // 检查是否已解锁
    const storageKey = `fuwari-unlocked-${slug}`;
    const isUnlocked = localStorage.getItem(storageKey) === 'true';
    
    if (isUnlocked) {
      // 如果已解锁，尝试从缓存获取内容
      const cachedContent = localStorage.getItem(`fuwari-content-${slug}`);
      if (cachedContent) {
        const contentElement = document.getElementById(contentId);
        if (contentElement) {
          renderMarkdownContent(cachedContent, contentElement);
          document.getElementById(overlayId).classList.add('hidden-overlay');
        }
      }
    }
    
    // 表单提交处理
    const form = document.getElementById(formId);
    if (form && encryptedData) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const inputPassword = e.target.querySelector('input[type="password"]').value;
        const errorElement = document.getElementById('error-message');
        const submitButton = e.target.querySelector('button[type="submit"]');
        
        // 显示加载状态
        const originalText = submitButton.textContent;
        submitButton.textContent = '验证中...';
        submitButton.disabled = true;
        
        try {
          // 使用bcrypt验证密码哈希
          const isValidPassword = dcodeIO.bcrypt.compareSync(inputPassword, encryptedData.hash);
          
          if (isValidPassword) {
            // 密码正确，解密内容
            const decryptedBytes = CryptoJS.AES.decrypt(encryptedData.content, inputPassword);
            const decryptedMarkdown = decryptedBytes.toString(CryptoJS.enc.Utf8);
            
            if (decryptedMarkdown) {
              // 解密成功，渲染Markdown内容
              localStorage.setItem(storageKey, 'true');
              localStorage.setItem(`fuwari-content-${slug}`, decryptedMarkdown);
              
              const contentElement = document.getElementById(contentId);
              if (contentElement) {
                renderMarkdownContent(decryptedMarkdown, contentElement);
                document.getElementById(overlayId).classList.add('hidden-overlay');
              }
              
              errorElement.classList.add('hidden');
            } else {
              throw new Error('解密失败');
            }
          } else {
            // 密码错误
            errorElement.classList.remove('hidden');
            e.target.querySelector('input[type="password"]').value = '';
          }
        } catch (error) {
          console.error('验证失败:', error);
          errorElement.classList.remove('hidden');
          e.target.querySelector('input[type="password"]').value = '';
        } finally {
          // 恢复按钮状态
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        }
      });
    }
  }

  // 渲染Markdown内容为HTML
  function renderMarkdownContent(markdown, targetElement) {
    // 动态加载marked库来解析Markdown
    if (typeof marked === 'undefined') {
      const markedScript = document.createElement('script');
      markedScript.src = 'https://cdn.jsdelivr.net/npm/marked@12.0.0/lib/marked.umd.js';
      markedScript.onload = function() {
        const html = marked.parse(markdown);
        targetElement.innerHTML = `<div class="w-full !max-w-none custom-md dark:prose-invert prose prose-base" data-pagefind-body>${html}</div>`;
        targetElement.classList.remove('hidden');
        targetElement.classList.add('unlocked');
      };
      document.head.appendChild(markedScript);
    } else {
      const html = marked.parse(markdown);
      targetElement.innerHTML = `<div class="w-full !max-w-none custom-md dark:prose-invert prose prose-base" data-pagefind-body>${html}</div>`;
      targetElement.classList.remove('hidden');
      targetElement.classList.add('unlocked');
    }
  }

  // 页面加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      loadLibraries().then(initEncryption).catch(console.error);
    });
  } else {
    loadLibraries().then(initEncryption).catch(console.error);
  }
})();
</script>
