---
/**
 * 文章密码保护组件
 * 使用构建时加密的内容和密码哈希验证
 */
interface Props {
  slug: string;
  encryptedData?: {
    content: string;
    hash: string;
  };
  class?: string;
}

const { slug, encryptedData, class: className = '' } = Astro.props;
const formId = `password-form-${slug}`;
const contentId = `article-content-${slug}`;
const overlayId = `overlay-${slug}`;
---

<div id={overlayId} class={`password-protection-overlay ${className}`} data-slug={slug}>
  <div class="password-container card-base rounded-xl p-6 md:p-8 max-w-md w-full">
    <h3 class="font-bold text-xl mb-4 text-black/90 dark:text-white/90">🔒 此文章已加密</h3>
    <p class="mb-6 text-black/70 dark:text-white/70">本文章内容可能忤逆部分读者所持的思潮立场、年龄背景或兴趣偏好。请输入密码以查看完整内容，若您不清楚密码，请联系博主获取。</p>
    <form id={formId} class="flex flex-col">
      <input 
        type="password" 
        class="form-input mb-4 p-2 rounded-md border border-gray-300 dark:border-gray-700 bg-white/90 dark:bg-[#1a1a1a] text-black/90 dark:text-white/90 w-full focus:outline-none focus:ring-2 focus:ring-[var(--primary)]" 
        placeholder="请输入密码" 
        required
      />
      <button 
        type="submit" 
        class="bg-[var(--primary)] hover:bg-[var(--primary-dark)] rounded-md py-2 px-4 text-white font-medium transition-colors"
      >
        解锁内容
      </button>
      <p id="error-message" class="text-red-500 mt-2 text-sm hidden">密码错误，请重试</p>
    </form>
  </div>
</div>

<!-- 将加密数据存储在隐藏元素中 -->
{encryptedData && (
  <div 
    id={`encrypted-data-${slug}`} 
    style="display: none;" 
    data-content={encryptedData.content}
    data-hash={encryptedData.hash}
  ></div>
)}

<style>
.password-protection-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: var(--card-bg);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 20;
  backdrop-filter: blur(5px);
}

.password-container {
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.hidden-overlay {
  animation: fadeOut 0.3s forwards;
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; visibility: hidden; }
}

.encrypted-content {
  display: none !important;
}

.encrypted-content.unlocked {
  display: block !important;
}
</style>

<script>
// 将脚本移到单独的文件或使用不同的方式处理
document.addEventListener('DOMContentLoaded', function() {
  const overlays = document.querySelectorAll('.password-protection-overlay');
  
  overlays.forEach(overlay => {
    const slug = overlay.dataset.slug;
    const formId = `password-form-${slug}`;
    const contentId = `article-content-${slug}`;
    const overlayId = `overlay-${slug}`;
    const encryptedDataEl = document.getElementById(`encrypted-data-${slug}`);
    
    if (!encryptedDataEl) return;
    
    const encryptedData = {
      content: encryptedDataEl.dataset.content,
      hash: encryptedDataEl.dataset.hash
    };
    
    // 初始化密码保护逻辑
    initPasswordProtection(slug, formId, contentId, overlayId, encryptedData);
  });
});

function initPasswordProtection(slug, formId, contentId, overlayId, encryptedData) {
  // 这里放置原来的初始化逻辑
  // 但是要确保库已经加载
}
</script>