---
// 接收标题数据
interface Props {
  headings: {
    depth: number;
    slug: string;
    text: string;
  }[];
}

const { headings } = Astro.props;

// 获取所有标题级别 (h1-h6)
const filteredHeadings = headings.filter(heading => heading.depth >= 1 && heading.depth <= 6);
---

{filteredHeadings.length > 0 && (
  <div class="mb-5 rounded-[var(--radius-large)] overflow-hidden" style="background: var(--primary); background-opacity: 0.1;">
    <!-- 目录标题栏 -->
    <button 
      class="toc-toggle w-full px-4 py-3 flex items-center justify-between text-sm font-medium text-white/90 hover:bg-white/10 transition-colors"
      type="button"
    >
      <span class="flex items-center gap-2">
        <div class="h-5 w-5 rounded-md bg-white/20 text-white/80 flex items-center justify-center">
          📋
        </div>
        目录
      </span>
      <span class="toc-arrow text-xs text-white/80">▼</span>
    </button>
    
    <!-- 目录内容 -->
    <div class="toc-content hidden px-4 pb-4 border-t border-white/20">
      <nav class="pt-3">
        {filteredHeadings.map((heading) => {
          // 根据标题级别设置缩进和样式
          const indentClass = heading.depth === 1 ? '' : 
                             heading.depth === 2 ? 'ml-2' :
                             heading.depth === 3 ? 'ml-4' :
                             heading.depth === 4 ? 'ml-6' :
                             heading.depth === 5 ? 'ml-8' : 'ml-10';
          
          const sizeClass = heading.depth === 1 ? 'text-sm font-bold' :
                           heading.depth === 2 ? 'text-sm font-medium' :
                           heading.depth === 3 ? 'text-xs font-medium' :
                           'text-xs';
          
          return (
            <a
              href={`#${heading.slug}`}
              class={`toc-link block py-2 text-white/70 hover:text-white transition-colors ${indentClass} ${sizeClass}`}
              data-heading-id={heading.slug}
            >
              {heading.text}
            </a>
          );
        })}
      </nav>
    </div>
  </div>
)}

<style>
  .toc-link.active {
    color: white;
    font-weight: 600;
  }
  
  /* 使用主题色作为背景的半透明效果 */
  .mb-5 {
    background: rgba(var(--primary-rgb), 0.15);
    backdrop-filter: blur(10px);
  }
</style>

<script>
  // 点击展开/收起功能
  document.addEventListener('DOMContentLoaded', () => {
    const tocToggle = document.querySelector('.toc-toggle');
    const tocContent = document.querySelector('.toc-content');
    const tocArrow = document.querySelector('.toc-arrow');
    
    if (tocToggle && tocContent && tocArrow) {
      tocToggle.addEventListener('click', () => {
        if (tocContent.classList.contains('hidden')) {
          // 展开
          tocContent.classList.remove('hidden');
          tocArrow.textContent = '▲';
        } else {
          // 收起
          tocContent.classList.add('hidden');
          tocArrow.textContent = '▼';
        }
      });
    }
    
    // 高亮当前阅读位置
    const observeHeadings = () => {
      const headings = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');
      const tocLinks = document.querySelectorAll('.toc-link');
      
      if (headings.length === 0 || tocLinks.length === 0) return;
      
      const observer = new IntersectionObserver((entries) => {
        let activeId = '';
        
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            activeId = entry.target.id;
          }
        });
        
        // 更新高亮链接
        tocLinks.forEach(link => {
          const headingId = link.getAttribute('data-heading-id');
          if (headingId === activeId) {
            link.classList.add('active');
          } else {
            link.classList.remove('active');
          }
        });
      }, {
        rootMargin: '-20% 0px -80% 0px',
        threshold: 0
      });
      
      headings.forEach(heading => observer.observe(heading));
    };
    
    // 延迟执行确保 DOM 完全加载
    setTimeout(observeHeadings, 100);
  });
  
  // 平滑滚动
  document.addEventListener('click', (e) => {
    const tocLink = e.target.closest('.toc-link');
    if (tocLink) {
      e.preventDefault();
      const targetId = tocLink.getAttribute('href').substring(1);
      const targetElement = document.getElementById(targetId);
      
      if (targetElement) {
        targetElement.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
        
        // 更新 URL
        history.pushState(null, null, `#${targetId}`);
      }
    }
  });
</script>