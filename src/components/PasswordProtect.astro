---
export interface Props {
  password: string;
  articleId: string;
  content: string;
}

const { password, articleId, content } = Astro.props;

// 在服务端生成加密数据
function simpleHash(text: string): string {
  let hash = 0;
  for (let i = 0; i < text.length; i++) {
    const char = text.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash;
  }
  return Math.abs(hash).toString(16);
}

// 简单的混淆函数
function obfuscateContent(content: string): string {
  // Base64编码
  const base64 = btoa(unescape(encodeURIComponent(content)));
  
  // 分块
  const chunks = [];
  const chunkSize = 50;
  for (let i = 0; i < base64.length; i += chunkSize) {
    chunks.push(base64.slice(i, i + chunkSize));
  }
  
  // 打乱
  const indices = chunks.map((_, i) => i);
  const shuffled = [...indices].sort(() => Math.random() - 0.5);
  
  return JSON.stringify({
    chunks: shuffled.map(i => chunks[i]),
    order: shuffled
  });
}

const passwordHash = simpleHash(password);
const obfuscatedContent = obfuscateContent(content);
---

<div class="password-protect-wrapper" data-article-id={articleId}>
  <div id={`password-container-${articleId}`} class="password-protect">
    <div class="lock-icon">
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect x="5" y="11" width="14" height="10" rx="2" ry="2"></rect>
        <path d="M7 11V7a5 5 0 0110 0v4"></path>
      </svg>
    </div>
    <h3>此文章需要密码访问</h3>
    <input 
      type="password" 
      id={`password-input-${articleId}`}
      placeholder="请输入密码" 
      class="password-input"
      autocomplete="off"
    />
    <button 
      id={`unlock-btn-${articleId}`}
      class="unlock-btn"
      data-hash={passwordHash}
      data-article-id={articleId}
    >
      解锁
    </button>
    <p id={`error-msg-${articleId}`} class="error-msg" style="display: none;">密码错误，请重试</p>
  </div>

  <!-- 存储加密后的内容 -->
  <div 
    id={`article-content-${articleId}`} 
    class="encrypted-content"
    style="display: none;"
    data-content={obfuscatedContent}
  >
  </div>
</div>

<style>
  .password-protect {
    text-align: center;
    padding: 4rem 2rem;
    border: 1px solid var(--color-border);
    border-radius: 8px;
    background: var(--color-bg-card);
    margin: 2rem 0;
  }

  .lock-icon {
    color: var(--color-text-50);
    margin-bottom: 1rem;
  }

  .password-input {
    margin: 1rem 0;
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 4px;
    width: 200px;
    background: var(--color-bg-base);
    color: var(--color-text);
  }

  .unlock-btn {
    padding: 0.5rem 1.5rem;
    background: hsl(var(--hue), 70%, 55%);
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: opacity 0.2s;
  }

  .unlock-btn:hover {
    opacity: 0.9;
  }

  .error-msg {
    color: #ef4444;
    margin-top: 0.5rem;
    font-size: 0.875rem;
  }

  .encrypted-content {
    animation: fadeIn 0.3s ease-in;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }
  
  .shake {
    animation: shake 0.5s;
  }
</style>

<script>
  // 所有加密逻辑都内联在这里
  function simpleHash(text: string): string {
    let hash = 0;
    for (let i = 0; i < text.length; i++) {
      const char = text.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(16);
  }

  function deobfuscateContent(obfuscated: string): string {
    try {
      const { chunks, order } = JSON.parse(obfuscated);
      const original = new Array(chunks.length);
      
      order.forEach((originalIndex: number, currentIndex: number) => {
        original[originalIndex] = chunks[currentIndex];
      });
      
      const base64 = original.join('');
      return decodeURIComponent(escape(atob(base64)));
    } catch {
      return '';
    }
  }

  class PasswordHandler {
    private attempts: { [key: string]: number } = {};
    private readonly maxAttempts = 5;
    
    canAttempt(articleId: string): boolean {
      const lockKey = `lock_${articleId}`;
      const lockUntil = sessionStorage.getItem(lockKey);
      
      if (lockUntil) {
        const now = Date.now();
        if (now < parseInt(lockUntil)) {
          return false;
        }
        sessionStorage.removeItem(lockKey);
        this.attempts[articleId] = 0;
      }
      
      return true;
    }
    
    recordFailure(articleId: string): number {
      this.attempts[articleId] = (this.attempts[articleId] || 0) + 1;
      
      if (this.attempts[articleId] >= this.maxAttempts) {
        const lockUntil = Date.now() + 300000; // 5分钟
        sessionStorage.setItem(`lock_${articleId}`, lockUntil.toString());
      }
      
      return this.maxAttempts - this.attempts[articleId];
    }
    
    reset(articleId: string): void {
      this.attempts[articleId] = 0;
      sessionStorage.removeItem(`lock_${articleId}`);
    }
  }

  const passwordHandler = new PasswordHandler();

  // 将初始化逻辑注册为全局函数，以便swup切换页面后可以重新初始化
  window.initPasswordProtect = function() {
    const unlockButtons = document.querySelectorAll('.unlock-btn');
    
    unlockButtons.forEach(btn => {
      // 先移除旧的监听器
      btn.removeEventListener('click', handleUnlock);
      // 添加新的监听器
      btn.addEventListener('click', handleUnlock);
    });

    // 检查sessionStorage中是否已解锁
    checkUnlockedArticles();

    // 添加回车键支持
    document.querySelectorAll('.password-input').forEach(input => {
      input.addEventListener('keypress', (e: KeyboardEvent) => {
        if (e.key === 'Enter') {
          const articleId = input.id.replace('password-input-', '');
          const btn = document.getElementById(`unlock-btn-${articleId}`);
          if (btn) btn.click();
        }
      });
    });
  }

  function handleUnlock(e: Event) {
    const btn = e.target as HTMLButtonElement;
    const articleId = btn.dataset.articleId!;
    const correctHash = btn.dataset.hash!;
    const inputEl = document.getElementById(`password-input-${articleId}`) as HTMLInputElement;
    const errorMsg = document.getElementById(`error-msg-${articleId}`)!;
    
    if (!passwordHandler.canAttempt(articleId)) {
      errorMsg.textContent = '尝试次数过多，请5分钟后再试';
      errorMsg.style.display = 'block';
      return;
    }
    
    const inputPassword = inputEl.value;
    const inputHash = simpleHash(inputPassword);
    
    if (inputHash === correctHash) {
      // 密码正确
      errorMsg.style.display = 'none';
      passwordHandler.reset(articleId);
      
      // 保存解锁状态到sessionStorage
      const unlockedArticles = JSON.parse(sessionStorage.getItem('unlockedArticles') || '[]');
      if (!unlockedArticles.includes(articleId)) {
        unlockedArticles.push(articleId);
        sessionStorage.setItem('unlockedArticles', JSON.stringify(unlockedArticles));
      }
      
      // 显示文章内容
      showArticleContent(articleId);
    } else {
      // 密码错误
      const remaining = passwordHandler.recordFailure(articleId);
      errorMsg.textContent = remaining > 0 ? `密码错误，剩余尝试次数：${remaining}` : '尝试次数过多，请5分钟后再试';
      errorMsg.style.display = 'block';
      inputEl.value = '';
      inputEl.classList.add('shake');
      setTimeout(() => inputEl.classList.remove('shake'), 500);
    }
  }

  function checkUnlockedArticles() {
    const unlockedArticles = JSON.parse(sessionStorage.getItem('unlockedArticles') || '[]');
    unlockedArticles.forEach((articleId: string) => {
      const container = document.getElementById(`password-container-${articleId}`);
      if (container) {
        showArticleContent(articleId);
      }
    });
  }

  function showArticleContent(articleId: string) {
    const container = document.getElementById(`password-container-${articleId}`);
    const contentEl = document.getElementById(`article-content-${articleId}`);
    
    if (container && contentEl) {
      // 获取并解密内容
      const obfuscatedContent = contentEl.dataset.content!;
      const content = deobfuscateContent(obfuscatedContent);
      
      // 显示内容
      container.style.display = 'none';
      contentEl.innerHTML = content;
      contentEl.style.display = 'block';
      
      // 清除data属性中的内容（安全考虑）
      delete contentEl.dataset.content;
    }
  }

  // 初始化
  document.addEventListener('DOMContentLoaded', () => {
    if (window.initPasswordProtect) {
      window.initPasswordProtect();
    }
  });

  // 支持swup页面切换
  if (window.swup) {
    window.swup.on('contentReplaced', () => {
      if (window.initPasswordProtect) {
        window.initPasswordProtect();
      }
    });
  }
</script>